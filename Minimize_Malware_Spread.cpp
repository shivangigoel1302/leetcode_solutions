class Solution {
public:
    void dfs(vector<vector<int>>&graph,int c,int src,vector<int>&colours){
        colours[src] = c;
        for(int i = 0; i < graph.size(); i++){
            if(graph[src][i] == 1 && colours[i] == -1){
                dfs(graph,c,i,colours);
            }
        }
        return;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int>colours(n,-1);
        int c = 0;
        for(int i = 0; i < n; i++){
            if(colours[i] == -1){
                dfs(graph,c,i,colours);
                c++;
            }
        }

        vector<int>size(c,0);
        for(int i = 0; i <n; i++){
            size[colours[i]]++;
        }
        vector<int>counter(c,0);
        for(int i = 0;i < initial.size(); i++){
            int col = colours[initial[i]];
            counter[col]++;
        }
        int ans = INT_MAX;
        for(int i =0; i < initial.size(); i++){
            int col = colours[initial[i]];
            if(counter[col] == 1){
                if(ans == INT_MAX){
                    ans = initial[i];
                }
                else if(size[col] > size[colours[ans]]){
                    ans = initial[i];
                }
                else if(size[col] == size[colours[ans]] && initial[i] < ans){
                    ans = initial[i];
                }
            }
        }
        if(ans == INT_MAX){
            for(int i = 0; i < initial.size(); i++){
                ans = min(ans,initial[i]);
            }
        }
        return ans;
    }
};
